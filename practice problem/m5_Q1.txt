1 . 
int k=1;
while(k<=n){
cout<<k<<endl;
k=k*2;
}

time complexity : logn


2.
for (int i = 0; i < n; i++)   ----- n
for (int j = i; j > 0; j--)   ----- n
cout << i << j;

time complexity : n*n = 0(n^2)

3.
for (int i = 0; i < n; i++) ------ n
for (int j = i; j > 0; j--)   ------ n
for(int k=j; k > 0; k--)    ------- n
cout << i << j << k;

time complexity : n*n*n = O(n^3)


4. 
for(int i=n/2;i<=n;i++){  --- n/2
for(int j=1;j<=n;j=j*2){  --- logn
cout<<i<<j<<endl;
}
}

time complexity : n/2 * log n = 0(nlogn)

5.
●
for(int i=n/2;i<=n;i++){ ---- n/2
for(int j=1;j<=n;j=j+i){   ----- n
cout<<i<<j<<endl;
}
}

time complexity : 



●
for(int i=1;i<=n;i++) --- n
{
if(builtin_popcount(i) == 1) 
{
for(int j=1;j<=n;j++) ----- n
cout<<i<<j<<endl;
}
}
Note: builtin_popcount(i) returns the number of set bits in 'i'.
For example, builtin_popcount(5) = 2. Because, 5 = (101)2
. So there are
2 set bits in 5.


time complexity : n*n = O(n^2)



